#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use Encode                qw(decode);
use File::Path            qw(make_path);
use File::Spec::Functions qw(catfile);
use Getopt::Long;
use Git::Repository;
use JSON;
use List::Util            qw(first);
use Log::Message::Simple;
use Pod::Usage;


my %opts;
GetOptions \%opts, qw(remote|r=s verbose|v help|h) or pod2usage(2);

if (@ARGV)
{
    my $args = join ' ', @ARGV;
    warn "Excessive arguments: $args\n";
    pod2usage(2);
}

pod2usage(-exitval => 0, -verbose => 2) if $opts{help};


my $verbose = $opts{verbose};
$Log::Message::Simple::MSG_FH = \*STDERR;


my $remote  = $opts{remote} or pod2usage(1);
my $dir     = catfile '__repos/', $remote =~ s/\W/_/gr;


my $repo;

sub git
{   ($repo || 'Git::Repository')->run(@_, {fatal => '!0'}) }


my (%user_data, @users);

sub get_user
{
    my $key = first { exists $user_data{$_} } @_;

    my $uid;
    if (defined $key)
    {
        $uid = $user_data{$key};
    }
    else
    {
        $uid = @users;
        push @users, $uid;
    }

    $user_data{$_} = $uid for @_;

    $uid
}


if (!-d $dir)
{
    msg "Cloning `$remote` into `$dir`...", $verbose;
    git 'clone', '-q', $remote, $dir;
}

chdir $dir or die "Couldn't cd into work tree $dir: $!\n";

$repo = Git::Repository->new;

msg "Pulling `$remote`...", $verbose;
git 'pull';


my %commits;

for (git 'log', '--format=format:%H%x00%aN%x00%aE%x00%s%x00%P')
{
    my $line = decode 'UTF-8', $_;
    my ($sha, $name, $mail, $message, $parents) = split "\0", $line, 5;

    push @{$commits{get_user($name, $mail)}}, {
        sha     => $sha,
        parents => [split ' ', $parents],
        message => $message,
    };
}


my @out;

for my $uid (0 .. $#users)
{
    push @out, {
        author => [grep { $user_data{$_} == $uid } sort keys %user_data],
        commit => $commits{$uid}
    };
}

print JSON->new->utf8->canonical->pretty->encode(\@out);


__END__

=head1 NAME

fetch-commits - Fetch commit info from a git repository.

=head1 SYNOPSIS

fetch-commits --remote=REPO [OPTIONS]

=head1 OPTIONS

=over

=item --remote=REPO, -r REPO

The path to the remote repository from which to extract the commit info.

=item --verbose, -v

Spews a bunch of debug information while running.

=item --help, -h

Show this usage information.

=back

=cut
