#!/usr/bin/perl
use strict;
use warnings;
use Algorithm::Diff qw(sdiff);
use Getopt::Long;
use Git::Repository;
use JSON;
use Pod::Usage;


my %opts;
GetOptions \%opts, qw(repo|r=s help|h) or pod2usage(2);

if (@ARGV)
{
    my $args = join ' ', @ARGV;
    warn "Excessive arguments: $args\n";
    pod2usage(2);
}

pod2usage(-exitval => 0, -verbose => 2) if $opts{help};
die "Missing repo parameter.\n" if not length $opts{repo};


my $repo = Git::Repository->new(work_tree => $opts{repo});
my $json = JSON->new->utf8->canonical->pretty;

while (<STDIN>)
{
    chomp;
    my ($sha1, $sha2, $file) = split "\0", $_, 3;

    my @file1 = $repo->run(show => "$sha1:$file");
    my @file2 = $repo->run(show => "$sha2:$file");
    my @diff  = sdiff(\@file1, \@file2);

    print $json->encode(\@diff), "\0\n";
    STDOUT->flush;
}


__END__

=head1 NAME

give-files - diff specific files from a git repo.

=head1 SYNOPSIS

Run this to start the service:

    give-files --repo=PATH-TO-GIT-REPO

It will then wait to receive lines of input on STDIN, which are formatted as
follows:

    $sha1^@$sha2^@$file

Where C<$sha1> and C<$sha2> are the old and new commit respectively, C<$file>
is the file you want to get a diff for and C<^@> is a C<NUL> character.

It will then output a diff in JSON format, followed by a C<NUL> marking the end
of the output. Here's a self-describing sample output:

    [
        ["u", "an unchanged line.", "an unchanged line"  ],
        ["c", "the old line",       "a modified line"    ],
        ["+", "",                   "a newly added lines"],
        ["-", "a removed line",     ""                   ]
    ]
    ^@

=head1 OPTIONS

=over

=item --repo=PATH-TO-REPO, -r PATH-TO-REPO

The path to the local git repository where the files should be taken from.

=item --help, -h

Show this usage information.

=back

=cut
