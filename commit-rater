#!/usr/bin/perl
use strict;
use warnings;
use feature qw(say);
use Getopt::Long;
use Pod::Usage;
use JSON;
use CommitRater;


my %opts;
GetOptions \%opts, qw(
     remote|r=s
       weka|w
 true-value|t=s
false-value|f=s
  data-type|d=s
       help|h
) or pod2usage(2);

if (@ARGV)
{
    my $args = join ' ', @ARGV;
    warn "Excessive arguments: $args\n";
    pod2usage(2);
}

pod2usage(-exitval => 0, -verbose => 2) if $opts{help};

my $remote = $opts{remote} or pod2usage(1);


my $rater = CommitRater->new(repo => CommitRater::Repo->new(remote => $remote));
if ($opts{weka})
{
    my $t    = $opts{ 'true-value'} // 'TRUE';
    my $f    = $opts{'false-value'} // 'FALSE';
    my $type = $opts{ 'data-type' } // "{$t,$f}";

    say '@RELATION ', $remote =~ s/\W/_/gr;
    say "\@ATTRIBUTE $_ $type" for CommitRater::ALL_KEYS;
    say '@DATA';
    say join ',', map { $_ ? $t : $f } @$_ for @{$rater->rate_independent};
}
else
{
    print JSON->new->utf8->pretty->canonical->encode($rater->rate);
}


__END__

=head1 NAME

commit-rater

=head1 SYNOPSIS

    commit-rater --remote=REMOTE

=cut
